let expressjwt,Post;_1fb‍.x([["requireSignIn",()=>requireSignIn],["canEditDeletePost",()=>canEditDeletePost],["isAdmin",()=>isAdmin]]);_1fb‍.w("express-jwt",[["expressjwt",["expressjwt"],function(v){expressjwt=v}]]);_1fb‍.w("../models/post",[["default",["Post"],function(v){Post=v}]]);


// express provide jwt authentication - This checks user is authorized or not
       const requireSignIn = expressjwt({
  secret: process.env.JWT_SECRET,
  algorithms: ["HS256"],
});

// Middleware to check whether the user is same who created the post or not
// post id is send in params and authication details is available in headers
       const canEditDeletePost = async (req, res, next) => {
  try {
    const post = await Post.findById(req.params._id);
    if (req.auth._id != post.postedBy) {
      return res.status(400).send("Unauthorized");
    } else {
      next();
    }
  } catch (e) {
    _1fb‍.g.console.log(e);
  }
};

       const isAdmin = async (req, res) => {
  try {
    const user = await user.findById(req, user._id);
    if (user.role != "Admin")
      return res.status(400).send("Unauthorised acsess");
    else {
      next();
    }
  } catch (e) {
    _1fb‍.g.console.log(err);
  }
};
